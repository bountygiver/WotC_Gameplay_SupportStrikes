//---------------------------------------------------------------------------------------
// FILE:	XComGameState_SupportStrike_Tactical
// AUTHOR:	E3245
// DESC:	This is separate from XCGS_SupportStrikeManager that only loads conditionally.
//		Primarily used to load in units if the player has purchased the Heli drop in strike.
//           
//---------------------------------------------------------------------------------------
//  Copyright (c) 2016 Firaxis Games, Inc. All rights reserved.
//---------------------------------------------------------------------------------------
class XComGameState_SupportStrike_Tactical extends XComGameState_BaseObject config(GameData)
	dependson(X2Helper_SpawnUnit);

	
// autogenerated on campaign start or when the manager gets installed
// Pilots that can spawn in matinees, cosmetic units only
var() array<StateObjectReference>						Pilots;

// These two arrays must have the same order with the same length!
// Resistance troopers that will be dropped in, not cosmetic
var() array<StateObjectReference>						XComResistanceRNFIDs;
// Same as above but cosmetic
var() array<StateObjectReference>						CosmeticResistanceRNFIDs;

// Config 
var config int											MaxPreGenSoldiers;
var config int											MaxPilots;
var config bool											GenerateRandomCharacter;

// Tactical Tags and Unit Values
var const name											TacticalTag;
var const name											CosmeticTag;
var const name											PilotTag;
var const name											UVIndexName;

// Exclusively used for character generation
var XComDropTrooperData									PreGenData;

// Cinematic maps are here since we only want to load it in when the player has mid-game/late-game strikes
var config array<string>								CinematicMaps;

// MAIN
//---------------------------------------------------------------------------------------

function InitializeGameState(XComGameState StartState)
{
	CreateRNFSoldiers(StartState);
	`LOG("[" $ GetFuncName() $ "] SUCCESS, Created " $ XComResistanceRNFIDs.Length $ " Soldiers, " $ CosmeticResistanceRNFIDs.Length $ " Copies, and " $ Pilots.Length $ " Pilots." ,, 'WotC_Strategy_SupportStrikes');
}

function CreateRNFSoldiers(XComGameState StartState)
{
	local int								Index, RandomChar;
	local XComDropTrooperData				EmptyData, PilotData;
	local XComGameState_Unit				NewSoldierState, CharPoolUnitState;
	local X2CharacterTemplate				CharacterTemplate;
	local XComGameState_HeadquartersAlien	AlienHQ;
	local X2CharacterTemplateManager		CharTemplateMgr;	
	local TSoldier							CharacterGeneratorResult;
			
	AlienHQ = XComGameState_HeadquartersAlien(`XCOMHISTORY.GetSingleGameStateObjectForClass(class'XComGameState_HeadquartersAlien'));
	CharTemplateMgr = class'X2CharacterTemplateManager'.static.GetCharacterTemplateManager();	

	// Choose a XComDropTrooperData struct for the first time
	if (!default.GenerateRandomCharacter && PreGenData.CharacterTemplate.Length == 0)
	{
		if (class'X2Helper_SpawnUnit'.default.arrSpawnUnitData.Length > 0)
			PreGenData = class'X2Helper_SpawnUnit'.static.PickBestDataSet(AlienHQ.GetForceLevel());
		else
			`LOG("[" $ GetFuncName() $ "] ERROR, No DataSet exists! Creating random trooper!",, 'WotC_Strategy_SupportStrikes');
	}
	`LOG("[" $ GetFuncName() $ "]  ------------------------------------------------------- Soldiers -------------------------------------------------------" ,, 'WotC_Strategy_SupportStrikes');

	//
	// Create soldiers and clones
	//
	for(Index = 0; Index < default.MaxPreGenSoldiers; ++Index)
	{
		NewSoldierState = CreateSoldiersInternal(StartState, AlienHQ.GetForceLevel());

		// Store the index in where it is in the array, cosmetic units are usually in the same index
		//
		NewSoldierState.SetUnitFloatValue(default.UVIndexName, Index, eCleanup_Never);
	
		//Create cosmetic copy of the soldier
		CopyRNFSoldierAsCosmeticSoldier(StartState, NewSoldierState);

		//Finally store the reference to the RNF ID array
		XComResistanceRNFIDs.AddItem(NewSoldierState.GetReference());
	}

	// Choose a XComDropTrooperData struct for the pilots
	if (!default.GenerateRandomCharacter)
	{
		if (class'X2Helper_SpawnUnit'.default.arrSpawnUnitData.Length > 0)
			PilotData = class'X2Helper_SpawnUnit'.static.PickBestDataSet(0, true);
		else
			`LOG("[" $ GetFuncName() $ "] ERROR, No DataSet exists! Creating random pilot!",, 'WotC_Strategy_SupportStrikes');
	}

	`LOG("[" $ GetFuncName() $ "]  -------------------------------------------------------- Pilots --------------------------------------------------------" ,, 'WotC_Strategy_SupportStrikes');

	//
	//Create some pilots
	//
	for(Index = 0; Index < default.MaxPilots; ++Index)
	{
		RandomChar = 0;	//We start at the next index then pop it off once done

		//Roll a soldier at random if there's more than x elements, and pop the data out
		if (PilotData.CharacterTemplate.Length > default.MaxPilots)
			RandomChar = `SYNC_RAND(0, PilotData.CharacterTemplate.Length);

		CharacterTemplate = CharTemplateMgr.FindCharacterTemplate(PilotData.CharacterTemplate[RandomChar].TemplateName);
		
		NewSoldierState = CharacterTemplate.CreateInstanceFromTemplate(StartState);

		//There is nothing to create
		if (default.GenerateRandomCharacter || PilotData.CharacterTemplate[RandomChar].CharacterPoolName == "")
		{
				CharacterGeneratorResult = GenerateRandomResult(PilotData.CharacterTemplate[RandomChar].TemplateName);

				NewSoldierState.SetTAppearance(CharacterGeneratorResult.kAppearance);
				NewSoldierState.SetCharacterName(CharacterGeneratorResult.strFirstName, CharacterGeneratorResult.strLastName, CharacterGeneratorResult.strNickName);
				NewSoldierState.SetCountry(CharacterGeneratorResult.nmCountry);

				NewSoldierState.GenerateBackground();
				NewSoldierState.TacticalTag = default.PilotTag;
		}
		else
		{
			//We're overriding the original created state, instead put it on a temporary unit
			CharPoolUnitState = `CHARACTERPOOLMGR.GetCharacter(PilotData.CharacterTemplate[RandomChar].CharacterPoolName);

			// If the temp state is blank, generate a new character over our old state
			if (CharPoolUnitState == none)
			{
				`LOG("[" $ GetFuncName() $ "] Character: " $ PilotData.CharacterTemplate[RandomChar].CharacterPoolName $ " Not found. Generating new character",, 'WotC_Strategy_SupportStrikes');
				CharacterGeneratorResult = GenerateRandomResult(PilotData.CharacterTemplate[RandomChar].TemplateName);

				NewSoldierState.SetTAppearance(CharacterGeneratorResult.kAppearance);
				NewSoldierState.SetCharacterName(CharacterGeneratorResult.strFirstName, CharacterGeneratorResult.strLastName, CharacterGeneratorResult.strNickName);
				NewSoldierState.SetCountry(CharacterGeneratorResult.nmCountry);

				NewSoldierState.GenerateBackground();
				NewSoldierState.TacticalTag = default.PilotTag;
			}
			else
				NewSoldierState = CopyUnitState(StartState, CharPoolUnitState, default.PilotTag, false, NewSoldierState.GetMyTemplateName());
		}
		
		NewSoldierState.RandomizeStats();

		if(!NewSoldierState.HasBackground())
			NewSoldierState.GenerateBackground();

		// Inventory
		NewSoldierState.ApplyInventoryLoadout(StartState);

		// Options
		NewSoldierState.bMissionProvided = true;

		`LOG("[" $ GetFuncName() $ "] Creating " $ NewSoldierState.GetMyTemplateName() $ " " $ NewSoldierState.GetFullName() $ " with Object ID: " $ NewSoldierState.ObjectID $ " and tactical tag " $ NewSoldierState.TacticalTag,, 'WotC_Strategy_SupportStrikes');

		//Finally store the reference to the RNF ID array
		Pilots.AddItem(NewSoldierState.GetReference());

		//Pop off the data
		if (!default.GenerateRandomCharacter && PilotData.CharacterTemplate.Length > 0)
		{
			PilotData.CharacterTemplate.Remove(RandomChar, 1);
		}
	}
	`LOG("[" $ GetFuncName() $ "]  ------------------------------------------------------------------------------------------------------------------------" ,, 'WotC_Strategy_SupportStrikes');

	//Clear data
	PilotData = EmptyData;
}

// Given a XComGameState_Unit, makes a complete copy of the unit including weapons
function CopyRNFSoldierAsCosmeticSoldier(XComGameState StartState, XComGameState_Unit OldSoldierState)
{
	local XComGameState_Unit		NewSoldierState;

	NewSoldierState = CopyUnitState(StartState, OldSoldierState, CosmeticTag, true);

	`LOG("[" $ GetFuncName() $ "] Creating clone " $ NewSoldierState.GetFullName() $ " with Object ID: " $ NewSoldierState.ObjectID $ " and tactical tag " $ NewSoldierState.TacticalTag,, 'WotC_Strategy_SupportStrikes');

	CosmeticResistanceRNFIDs.AddItem(NewSoldierState.GetReference());
}

// If a soldier dies in the mission, replace them with a new randomly picked soldier
function FillRNFSoldiers(XComGameState StartState)
{
	local int								Range, i;
	local XComGameState_Unit				NewSoldierState;
	local XComGameState_HeadquartersAlien	AlienHQ;
	local XComDropTrooperData				ChosenData;

	AlienHQ = XComGameState_HeadquartersAlien(`XCOMHISTORY.GetSingleGameStateObjectForClass(class'XComGameState_HeadquartersAlien'));

	// Generate more soldiers if the arrays are smaller than the maximum
	// Both are checked to ensure that the arrays have the same exact length
	if ( (XComResistanceRNFIDs.Length < default.MaxPreGenSoldiers) && (CosmeticResistanceRNFIDs.Length < default.MaxPreGenSoldiers) )
	{
		// Choose a XComDropTrooperData struct, there's a chance that the Force Level updated while we're on mission
		if (!default.GenerateRandomCharacter && PreGenData.CharacterTemplate.Length == 0)
		{
			if (class'X2Helper_SpawnUnit'.default.arrSpawnUnitData.Length > 0)
			{
				ChosenData = class'X2Helper_SpawnUnit'.static.PickBestDataSet(AlienHQ.GetForceLevel());

				//Test if it matches our current soldier data, if so discard and continue
				if (PreGenData.UniqueID != ChosenData.UniqueID)
					PreGenData = ChosenData;
			}
			else
				`LOG("[" $ GetFuncName() $ "] ERROR, No DataSet exists! Creating random trooper!",, 'WotC_Strategy_SupportStrikes');
		}
		`LOG("[" $ GetFuncName() $ "]  ------------------------------------------------------- Soldiers -------------------------------------------------------" ,, 'WotC_Strategy_SupportStrikes');

		// Get the amount of soldiers we need to generate
		Range = default.MaxPreGenSoldiers - XComResistanceRNFIDs.Length;
		
		for (i = 0; i < Range; ++i)
		{
			NewSoldierState = CreateSoldiersInternal(StartState, AlienHQ.GetForceLevel());
		
			//Create cosmetic copy of the soldier
			CopyRNFSoldierAsCosmeticSoldier(StartState, NewSoldierState);

			//Finally store the reference to the RNF ID array
			XComResistanceRNFIDs.AddItem(NewSoldierState.GetReference());
		}
	}
}

// Every month repopulate the arrays
function UpdateRNFSoldiers(XComGameState StartState)
{
	local int								Index;
	local XComGameState_Unit				NewSoldierState;
	local XComGameState_HeadquartersAlien	AlienHQ;
	local XComDropTrooperData				ChosenData;

	AlienHQ = XComGameState_HeadquartersAlien(`XCOMHISTORY.GetSingleGameStateObjectForClass(class'XComGameState_HeadquartersAlien'));

	// Choose a XComDropTrooperData struct
	if (!default.GenerateRandomCharacter && PreGenData.CharacterTemplate.Length == 0)
	{
		if (class'X2Helper_SpawnUnit'.default.arrSpawnUnitData.Length != 0)
			ChosenData = class'X2Helper_SpawnUnit'.static.PickBestDataSet(AlienHQ.GetForceLevel());

			//Test if it matches our current soldier data, if so discard and continue
			if (PreGenData.UniqueID != ChosenData.UniqueID)
				PreGenData = ChosenData;
		else
			`LOG("[" $ GetFuncName() $ "] ERROR, No DataSet exists! Creating random trooper!",, 'WotC_Strategy_SupportStrikes');
	}

	//Wipe the arrays
	XComResistanceRNFIDs.Length		= 0;
	CosmeticResistanceRNFIDs.Length = 0;

	for(Index = 0; Index < default.MaxPreGenSoldiers; ++Index)
	{
		NewSoldierState = CreateSoldiersInternal(StartState, AlienHQ.GetForceLevel());
	
		//Create cosmetic copy of the soldier
		CopyRNFSoldierAsCosmeticSoldier(StartState, NewSoldierState);

		//Finally store the reference to the RNF ID array
		XComResistanceRNFIDs.AddItem(NewSoldierState.GetReference());
	}
}

function XComGameState_Unit CreateSoldiersInternal(XComGameState NewGameState, int ForceLevel)
{
	local int								NewRank, RandomChar;
	local XComGameState_Unit				NewSoldierState, CharPoolUnitState;
	local X2CharacterTemplate				CharacterTemplate;
	local name								CharacterTemplateName;
	local TSoldier							CharacterGeneratorResult;
	local bool								GenerateRandomCharacters;

	RandomChar = 0;	//We start at the 0th index

	//If the generate random character boolean is set, or we have no more units to pick from the dataset, then toggle the boolean
	if (default.GenerateRandomCharacter || PreGenData.CharacterTemplate.Length == 0)
		GenerateRandomCharacters = true;
	else
	{
		GenerateRandomCharacters = false;

		RandomChar = 0;	//We start at the next index then pop it off once done

		//Roll a soldier at random if there's more than 4 elements, and pop the data out
		if (PreGenData.CharacterTemplate.Length > default.MaxPreGenSoldiers)
			RandomChar = `SYNC_RAND(PreGenData.CharacterTemplate.Length);
	}

	// If our template name is blank from the dataset, then just create a XCom Soldier
	if(PreGenData.CharacterTemplate[RandomChar].TemplateName == '' || GenerateRandomCharacters)
	{
		CharacterTemplateName = 'Soldier';
		CharacterTemplate = class'X2CharacterTemplateManager'.static.GetCharacterTemplateManager().FindCharacterTemplate(CharacterTemplateName);
	}
	else
		CharacterTemplate = class'X2CharacterTemplateManager'.static.GetCharacterTemplateManager().FindCharacterTemplate(PreGenData.CharacterTemplate[RandomChar].TemplateName);
	
	// Create our instance
	NewSoldierState = CharacterTemplate.CreateInstanceFromTemplate(NewGameState);
	
	//Create a random soldier if the character pool name is empty or the player prefers the character pool instead
	if (PreGenData.CharacterTemplate[RandomChar].CharacterPoolName == "" || GenerateRandomCharacters)
	{
		CharacterGeneratorResult = GenerateRandomResult(PreGenData.CharacterTemplate[RandomChar].TemplateName);

		NewSoldierState.SetTAppearance(CharacterGeneratorResult.kAppearance);
		NewSoldierState.SetCharacterName(CharacterGeneratorResult.strFirstName, CharacterGeneratorResult.strLastName, CharacterGeneratorResult.strNickName);
		NewSoldierState.SetCountry(CharacterGeneratorResult.nmCountry);

		NewSoldierState.GenerateBackground();
		NewSoldierState.TacticalTag = default.TacticalTag;
	}
	else
	{
		CharPoolUnitState = `CHARACTERPOOLMGR.GetCharacter(PreGenData.CharacterTemplate[RandomChar].CharacterPoolName);
		NewSoldierState = CopyUnitState(NewGameState, CharPoolUnitState, default.TacticalTag, false, NewSoldierState.GetMyTemplateName());
	}

	//
	/* Misc	*/
	//	
	NewSoldierState.RandomizeStats();
	NewSoldierState.bAllowedTypeSoldier = true;	

	//
	/* Rank	*/
	//

	// This will follow the same settings as the base personel rewards
	NewRank = class'X2StrategyElement_DefaultRewards'.static.GetPersonnelRewardRank(true);

	NewSoldierState.SetSkillLevel(NewRank);
	NewSoldierState.SetXPForRank(NewRank);
	NewSoldierState.StartingRank = NewRank;

	while (NewSoldierState.CanRankUpSoldier()) {
		NewSoldierState.RankUpSoldier(NewGameState);
	}
	
	//	
	/*	Background	*/
	//
	if(!NewSoldierState.HasBackground())
		NewSoldierState.GenerateBackground();
	
	//
	/*	Inventory	*/
	//
	NewSoldierState.ApplyInventoryLoadout(NewGameState, PreGenData.CharacterTemplate[RandomChar].LoadoutName);
	
	// Swap weapons after applying loadout. Only applies to custom units defined the dataset
	if (!GenerateRandomCharacters)
		class'X2Helper_SpawnUnit'.static.ChangeEquipment(PreGenData.CharacterTemplate[RandomChar], NewSoldierState, NewGameState, false);
	
	//
	/*	Options	*/
	//
	NewSoldierState.bMissionProvided = true;

	//Pop off the data
	if (!GenerateRandomCharacters && PreGenData.CharacterTemplate.Length > 0)
	{
		PreGenData.CharacterTemplate.Remove(RandomChar, 1);
	}

	`LOG("[" $ GetFuncName() $ "] Creating " $ NewSoldierState.GetMyTemplateName() $ " " $ NewSoldierState.GetFullName() $ " with Object ID: " $ NewSoldierState.ObjectID $ ", tactical tag " $ NewSoldierState.TacticalTag,, 'WotC_Strategy_SupportStrikes');

	return NewSoldierState;
}

// UTILITIES - CREATING SOLDIERS
//---------------------------------------------------------------------------------------

// Given a XComGameState_Unit, makes a complete copy of the unit including weapons with a unique ID
function XComGameState_Unit CopyUnitState(XComGameState StartState, XComGameState_Unit OldSoldierState, name TacticalTagToApply, optional bool bCopyWeapons = false, optional name CharacterTemplateName = '')
{
	local X2CharacterTemplate		CharacterTemplate;
	local XComGameState_Unit		NewSoldierState;
	local XComGameState_Item		PrimaryWeapon, SecondaryWeapon;

	if (CharacterTemplateName != '')
		CharacterTemplate = class'X2CharacterTemplateManager'.static.GetCharacterTemplateManager().FindCharacterTemplate(CharacterTemplateName);
	else
		CharacterTemplate = class'X2CharacterTemplateManager'.static.GetCharacterTemplateManager().FindCharacterTemplate(OldSoldierState.GetMyTemplateName());

	NewSoldierState = CharacterTemplate.CreateInstanceFromTemplate(StartState);

	NewSoldierState.SetTAppearance(OldSoldierState.kAppearance);
	NewSoldierState.SetCharacterName(OldSoldierState.GetFirstName(), OldSoldierState.GetLastName(), OldSoldierState.GetNickName());
	NewSoldierState.SetCountry(OldSoldierState.GetCountry());
	NewSoldierState.SetBackground(OldSoldierState.GetBackground());

	// Add so we can track them later in the tactical state
	NewSoldierState.TacticalTag = TacticalTagToApply;

	if (bCopyWeapons)
	{
		PrimaryWeapon	= OldSoldierState.GetItemInSlot(eInvSlot_PrimaryWeapon);
		SecondaryWeapon = OldSoldierState.GetItemInSlot(eInvSlot_SecondaryWeapon);

		if (PrimaryWeapon != none)
			class'X2Helpers_MiscFunctions'.static.GiveItem(PrimaryWeapon.GetMyTemplateName(), NewSoldierState, StartState);

		if (SecondaryWeapon != none)
			class'X2Helpers_MiscFunctions'.static.GiveItem(SecondaryWeapon.GetMyTemplateName(), NewSoldierState, StartState);

		NewSoldierState.ApplyInventoryLoadout(StartState);
	}

	return NewSoldierState;
}

function TSoldier GenerateRandomResult(name TemplateName)
{
	local X2CharacterTemplateManager    CharTemplateMgr;	
	local X2CharacterTemplate           CharacterTemplate;
	local TSoldier                      CharacterGeneratorNone;
	local XGCharacterGenerator          CharacterGenerator;

	CharTemplateMgr = class'X2CharacterTemplateManager'.static.GetCharacterTemplateManager();

	CharacterTemplate = CharTemplateMgr.FindCharacterTemplate(TemplateName);	

	if (CharacterTemplate != none)
	{
		CharacterGenerator = `XCOMGAME.Spawn(CharacterTemplate.CharacterGeneratorClass);

		return CharacterGenerator.CreateTSoldier(TemplateName);
	}

	return CharacterGeneratorNone;
}

// GAMESTATE NATIVE EVENTS
//---------------------------------------------------------------------------------------

/// <summary>
/// Called immediately prior to loading, this method is called on each state object so that its resources can be ready when the map completes loading. Request resources
/// should output an array of strings containing archetype paths to load
/// </summary>
event RequestResources(out array<string> ArchetypesToLoad)
{
	local XComGameStateHistory	History;
	local StateObjectReference	UnitRef;
	local XComGameState_Unit	UnitState;	
	local string				strCineMap;	

	super.RequestResources(ArchetypesToLoad);
 
    History = `XCOMHISTORY;

	//Load the reinforcement pawns and other objects
	//The cosmetic ones are copies and don't need to be loaded in
	foreach XComResistanceRNFIDs(UnitRef)
	{
		UnitState = XComGameState_Unit(History.GetGameStateForObjectID(UnitRef.ObjectID));
		UnitState.RequestResources(ArchetypesToLoad);
	}

	foreach Pilots(UnitRef)
	{
		UnitState = XComGameState_Unit(History.GetGameStateForObjectID(UnitRef.ObjectID));
		UnitState.RequestResources(ArchetypesToLoad);
	}

	//Load in the umaps required for our ability to work
	foreach default.CinematicMaps(strCineMap)
		ArchetypesToLoad.AddItem(strCineMap);
}

// DLC HOOKS
//---------------------------------------------------------------------------------------
static function OnExitPostMissionSequence(XComGameState NewGameState)
{
	local XComGameStateHistory								History;
	local XComGameState_SupportStrikeManager				SupportStrikeMgr;
	local XComGameState_SupportStrike_Tactical				StrikeTactical;
	
	// Get our states
	History = `XCOMHISTORY;
	SupportStrikeMgr = XComGameState_SupportStrikeManager(History.GetSingleGameStateObjectForClass(class'XComGameState_SupportStrikeManager'));
	StrikeTactical = XComGameState_SupportStrike_Tactical(History.GetGameStateForObjectID(SupportStrikeMgr.TacticalGameState.ObjectID));

	// Run our update function
	if (StrikeTactical != none)
	{
		StrikeTactical.FillRNFSoldiers(NewGameState);
	}
}

// defprops
//---------------------------------------------------------------------------------------

DefaultProperties
{
	TacticalTag = "SupportStrikeRNFUnit"
	CosmeticTag = "SupportStrike_Clone"
	PilotTag	= "SupportStrike_Pilot"
	UVIndexName = "HeliStrikeIndex"
}